{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbar/searchbar.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBar","placeholder","handleChange","type","onChange","App","e","setState","searchBar","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,KAChF,6BAAKL,EAAMG,QAAQG,OACnB,+BAAON,EAAMG,QAAQI,YCHhBC,EAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLtBO,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAK,SACRF,YAAaA,EACbG,SAAUF,KC0CHG,G,wDAzCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,UAAWF,EAAEG,OAAOC,SAbnC,EAAKC,MAAQ,CACXb,SAAU,GACVU,UAAU,IAJD,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO1C,WACE,MAAgCC,KAAKN,MAA7Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,UACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAUY,kBAC9C,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAce,KAAKf,eAQnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GApCdI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.98a41f44.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = props =>(\n    <div className=\"card-container\">\n        <img src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`} alt=\"\" />\n        <h1>{props.monster.name}</h1>\n        <span>{props.monster.email}</span>\n    </div>\n);","import React from 'react';\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component.jsx'\n\nexport const CardList = (props) => (\n    <div className=\"card-list\">\n        {\n            props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster}/>\n            ))\n        }    \n    </div>\n);","import React from 'react'\n\n\nexport const SearchBar = ({placeholder, handleChange}) =>(\n    <input type=\"search\"  \n        placeholder={placeholder} \n        onChange={handleChange}\n    />\n)","import React, { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBar} from './components/searchbar/searchbar.component.jsx'\nimport './App.css';\nimport './components/card-list/card-list.styles.css'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchBar:''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = (e) =>{\n    this.setState({searchBar: e.target.value})\n  }\n\n  render(){\n    const { monsters, searchBar } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchBar.toLowerCase()))\n      return (\n        <div className=\"App\">\n          <h1>Monster Rolodex</h1>\n          <SearchBar \n            placeholder='search monster'\n            handleChange={this.handleChange}\n          />\n          {/* <input type=\"search\"  placeholder='search monster' \n          onChange={\n            e => {\n              this.setState({searchBar: e.target.value});\n            }\n          }/> */}\n            <CardList monsters={filteredMonsters}/>\n        </div>\n      )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}